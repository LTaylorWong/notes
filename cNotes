9/11/15
scp-secure copy
to copy foo.c from one computer to the other in the /code/ directory
scp foo.c username@homer.stuy.edu:/code/

List java primitive types:
	-int 		32 bit integer
	-boolean	true/false 
	-char		single character
	-long		64 bit integer
	-double		64 bit floating point number
	-float		32 bit floating point number
	-byte		8 bit integer
	-short		16 bit integer

------------------------------------------------------
9/16/15
Aim: Variables are the spice of life
Do now: What is the smallest variable type that could be used to store 
the following values (using standard sizes)
1)5		byte
2)-30,000	short
3)255		short
4)5,000,000,000	long

byte: -128--->127 (-2^7--->-2^7 -1)
short: -2^15---> 2^15 -1
int: -2^31 ---> 2^31 -1
long: -2^63 ---> 2^63 -1

C primitive variable types:
	All C primitives are numeric
	
	The only difference is floating point vs. integer and size of variable.
	
	Size can be platform dependent
		sizeof(<TYPE>) can be used to find the size in bytes
		sizeof(int)

	Type		Standard Size(in bytes)
	int			4
	short			2
	long			8	
	float			4
	double			8
	char			1

	All boolean values are numbers
		0 ==> false
		anything else ==> true

	Data Types and Variables:
		Character literals are single characters inside ' '
			ex. 'a', '*' etc....
		String literals exists, even though there is no String date type
			ex. "hello", "you smell"

		Variables cannot be declared in for loop statements
		but they can be initialized.
-------------------------------------------------------------
9/17/15
Aim: Always read the fine print
Do Now: Open up your editor choice(emacs)
	write basic "Hello World" program in Java 	

	(cont. from yesterday)
	Any variable type can be declared an "unsigned" variable
	this signifies the variable will never be negative
		the lower bound of any unsigned variable is 0
		the upper bound will be greater than the signed version
		ex. 	unsigned char x
			0<=x<=255
	#include: C version of import
	compiling/nameing c files: gcc <file name> -o "<name>"
-------------------------------------------------------------
9/18/15
Aim: A vast array of possiblities
Do now: How do you declare/use arrays in java

	C files: full code
	h files: header, function headers, constants/globals

	PATH: location of known exectuabl programs
	
	printf
		The most important function!!!!!
		Prints formatted strings
		printf(<string literal>, <var1>, <var2>.....)
	Simple printf does not need <var> arguments.
	printf does not add a new line

	 printf("bob = %f\n", bob); %f:place holder for floating point number

	FORMATTING PLACE HOLDERS
	Type		Char
	int		%d
	long		%ld
	float		%f
	double		%lf
			%0.<x>f will provide x digits after the floating point
	char		%c
	char array	%s
	pointer		%p
-------------------------------------------------------------
9/22/15
Aim: What's the point of it all?
Memory Management
	Memory allocation either happens at compile time 
	or at run time (dynamic)
Compiler Allocated Memory
	Packaged with the binary of the program
	
	***There is no standard default value***

	Varibles and arrays are allocated here
		ex. float a	int b[5]
	Arrays
		Arrays are NOT  dynamic
		Must have a fixed size
		There is no length function
		No boundary checking
----------------------------------------------------------
9/25/15
Aim: Now really getting to the point.
	
	Pointers-
		Variables designed to store memory
		addresses (think references in java)
	[	
	 int fred;     fred address = 1000
	 fred = 86; ---> 1000(address) = 86
	]
	[
	 int *pfred; 		fred pointer
	 pfred address = 2020
	 if give pfred value 1000, points to fred
	]
	
	& 	give address operator
	* 	is used to declare a variables as a pointer type
		ex. int *p, double *q, char *r..... 

	all pointers are the same size
