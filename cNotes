9/11/15
scp-secure copy
to copy foo.c from one computer to the other in the /code/ directory
scp foo.c username@homer.stuy.edu:/code/

List java primitive types:
	-int 		32 bit integer
	-boolean	true/false 
	-char		single character
	-long		64 bit integer
	-double		64 bit floating point number
	-float		32 bit floating point number
	-byte		8 bit integer
	-short		16 bit integer

------------------------------------------------------
9/16/15
Aim: Variables are the spice of life
Do now: What is the smallest variable type that could be used to store 
the following values (using standard sizes)
1)5		byte
2)-30,000	short
3)255		short
4)5,000,000,000	long

byte: -128--->127 (-2^7--->-2^7 -1)
short: -2^15---> 2^15 -1
int: -2^31 ---> 2^31 -1
long: -2^63 ---> 2^63 -1

C primitive variable types:
	All C primitives are numeric
	
	The only difference is floating point vs. integer and size of variable.
	
	Size can be platform dependent
		sizeof(<TYPE>) can be used to find the size in bytes
		sizeof(int)

	Type		Standard Size(in bytes)
	int			4
	short			2
	long			8	
	float			4
	double			8
	char			1

	All boolean values are numbers
		0 ==> false
		anything else ==> true

	Data Types and Variables:
		Character literals are single characters inside ' '
			ex. 'a', '*' etc....
		String literals exists, even though there is no String date type
			ex. "hello", "you smell"

		Variables cannot be declared in for loop statements
		but they can be initialized.
-------------------------------------------------------------
9/17/15
Aim: Always read the fine print
Do Now: Open up your editor choice(emacs)
	write basic "Hello World" program in Java 	

	(cont. from yesterday)
	Any variable type can be declared an "unsigned" variable
	this signifies the variable will never be negative
		the lower bound of any unsigned variable is 0
		the upper bound will be greater than the signed version
		ex. 	unsigned char x
			0<=x<=255
	#include: C version of import
	compiling/nameing c files: gcc <file name> -o "<name>"
-------------------------------------------------------------
9/18/15
Aim: A vast array of possiblities
Do now: How do you declare/use arrays in java

	C files: full code
	h files: header, function headers, constants/globals

	PATH: location of known exectuabl programs
	
	printf
		The most important function!!!!!
		Prints formatted strings
		printf(<string literal>, <var1>, <var2>.....)
	Simple printf does not need <var> arguments.
	printf does not add a new line

	 printf("bob = %f\n", bob); %f:place holder for floating point number

	FORMATTING PLACE HOLDERS
	Type		Char
	int		%d
	long		%ld
	float		%f
	double		%lf
			%0.<x>f will provide x digits after the floating point
	char		%c
	char array	%s
	pointer		%p
-------------------------------------------------------------
9/22/15
Aim: What's the point of it all?
Memory Management
	Memory allocation either happens at compile time 
	or at run time (dynamic)
Compiler Allocated Memory
	Packaged with the binary of the program
	
	***There is no standard default value***

	Varibles and arrays are allocated here
		ex. float a	int b[5]
	Arrays
		Arrays are NOT  dynamic
		Must have a fixed size
		There is no length function
		No boundary checking
----------------------------------------------------------
9/25/15
Aim: Now really getting to the point.
	
	Pointers-
		Variables designed to store memory
		addresses (think references in java)
	[	
	 int fred;     fred address = 1000
	 fred = 86; ---> 1000(address) = 86
	]
	[
	 int *pfred; 		fred pointer
	 pfred address = 2020
	 if give pfred value 1000, points to fred
	]
	
	& 	give address operator
	* 	is used to declare a variables as a pointer type
		ex. int *p, double *q, char *r..... 

	all pointers are the same size
----------------------------------------------------------
9/28/15
Aim: Really REALLY getting to the point
	Do now:
		1)declare int, double, and char variables
		2)declare int, double, and char pointers
		3)Initialize each pointer to the address of the
		  correpsonding variable
		4)Print out the pointer's value for each (as
		  an assigned long)
		5)Add 1 to each pointer
		6)Print out pointers again

	*	also used as the de-reference opperator
			It accesses the value at the memory location
			stored in the pointer

	Pointer arithmetic
		int *p = &i;
		char *c = &i;
		
		p++; //will add 4 to p
		c++; //will add 1 to p
	
	Array variables are immutable pointers

	Pointers can be assigned to array variables
		int ray[5];
		int *rp = ray;
	
		ray[3] <=> ?
			   *(rp+3)

	a[i] notation is shorthand for *(a+i)

	a[i] = i[a] 
------------------------------------------------------------
9/29/15
Aim: Time to stop Stringing you along
	
	float fray[5];
	float *fp = fray

	fp------> fray|2.3|2  |81.7|.21|5|
		       824 828 832	
	fp = 824
	*fp = 2.3

	fp + 2 ---> 832
	*fp + 2 ---> 4.3
	*(fp + 2) ---> 81.7
	fp[2] = 81.7
	fray[2] = 81.7

	Cstrings
		Strings are charcter arrays that end with a null
		character (either '' or 0 or '\0')
		STRING FUNCTION WILL NOT WORK WITHOUT THE TERMINATING NULL

	WAYS TO DELCARE STRINGS:
		char s[256];
			Normal array declaration, allocates 256 bytes
			but nothing is set automatically

		char s[256] = "Imagine";
			Allocates 256 bytes, pit "Imagine" in the first 
			7 bytes AND add null at the 8th byte.
	

		char s[] = "Tuesday";
			Allocates 8 bytes, and puts "Tuesday" in the first
			7 bytes AND add null at the 8th byte.
		char *s = "Mankind";
			Allocates 8 bytes, and puts "Tuesday" in the first
			7 bytes AND add null at the 8th byte. s is a pointer
			variable instead of an array. 		
			
		You can only assign strings with = at declaration
			char s[] = "zero" //ok
			s = "seven"        //not ok
------------------------------------------------------------------------
9/30/15
Aim: Writing fuctioning code
Do now: write a program to do the following:
	1)Create a string and set it to some value
	2)Find it's length

	All c functions are "pass by value"
		a parameter is a copy of the variable passed into 
		the function. The original varaible is not touched.

	fuction headers
		<return type> name (<parameters>)
---------------------------------------------------------------------
10/1/15
	You must declare a function before you can use it (like netlogo)

	1) write entire code in correct order
	2)write the fuction headers at the to of your code, 
		and the provide full definition later
	3)put all function headers in a .h file, then include 
		in the .c file

	string.h
		C library that includes useful string functions
		
		All the fuctions assume that the parameter strings are always 
		null-terminating

	int strlen(char *s)
		returns the number of characters form the start of s up to
		but not including the null
	int strcmp (char *s1, char *s2)
`		returns 0 if s1 and s2 are identical
		returns a positive number if s1 is greater thatn s2
	`	returns a negative number if it is less
	char * strcpy (char *dest, char *source)
		copies all the characters up to and including the null
		returns dest
	chat * strcat(char *s1, char *s2)
		appends the characters up to and including the terminating
		null in s2 at the end of s1
		returns s1
	Many string functions have a "strn" version, these take an extra
	parameter that set a limit to the number of bytes you will look 
	at in a string
----------------------------------------------------------------------
10/6/15
separate compilation
	you can combine multiple c files inta a c program be including
	them all in gcc command
	
	you cannot have duplicate functions or global variable names
	across these files.
	this includes the main() function.
---------------------------------------------------------------------
10/07/15

gcc -c :only compilies, does not create executable file
creates .o file, do with .c files with no main() function
file: tell you what type of file it is
gcc can link .o and .c files together

Make
	creates compiling instrusctions and setting up dependencies

	looks at your time stamps and will deternmine if it needs
	to be updated

TARGET:dependencies
TAB	<rules>
ex. a.out: main.c dwstring.o
	   gcc main.c dwstring.o
dwstring.o: dwstring.h dwstring.c
	    gcc -c dwstring.c
------------------------------------------------------------------
10/08/15
Aim: if you cant (al)locate your memory...i forget

Dynamic memory allocation
	malloc(int x)
		Allocates x bytes of memory (from the heap)
		
		Returns the address at the begining of allocation
		
		Returns a void *, always typecast to the correct 
		pointer type	 	

		int *p;
		p = (int *)malloc(5 * sizeOf(int));

	calloc(int n, int x)
		Allocates n * x bytes of memory

		Ensures that each bit is set to 0

		Works like malloc in all other ways

		int *p;
		p = (int *)calloc(5, sizeOf(int));

	realloc(void *p, int x)
		Changes the amount of memory allocated to a given 
		block

		p must be a pointer to the beginning of an 
		allocated block of memory, but it does not have to 
		be the original pointer.

		If x is smaller than the original size of the 
		allocation, the extra bytes will be released

		If x is larger than the orginal size of the 
		allocation the extra bytes will be released.



	free 
		released dyanamiclly allocated memory

		takes one parameter

		every time you call malloc/calloc,
		must have a corresponding free call
-------------------------------------------------------------
10-09

-put struct def in header file
typedef struct n{
	int i;
	struct n *next;
	} node; 
-------------------------------------------------------------
10-13
ZELDA'S IN TROUBLE, GET LINK!

if you want to use a struct within its owe declaration, you must prototype it first

c uses snake case

when memory is not allocated dyanimically it is put on the stack, therefore it will go away after function is done.
--------------------------------------------------------------------
10-15
HOW TO DEAL WITH HEADER FILES WITH INTER-DEPENDENCIES

#define
	to find and replace
ex:
	#define foo 27
	//whereever foo is used, it will be replaced by 27 NO MATTER WHAT
	//VALUE CANNOT BE CHANGED

#ifndef (if not defined)
	STUFF HAPPENS
#endif

ex:
	#ifndef foo (if foo is not defined)
----------------------------------------------------------
10-20
Aim: File this under useful information

Do Now: What are different kind of file permissions?
read, write, excute
using Rand- if constantly running, will get the same number because starting with the same input
srand()
rand()
sranddev()

there are 3 permission "areas"
	user, group, others

	each area can have its own permissions:
	read, write, execute
	
	644-> user:read & write, group: read, other: read

chmod: change mode (to change the permissions)
the owner of the file always has the power
-----------------------------------------------
Note: Dont compile .h files!
SOTD: Everything- MrNorth

Aim: Opening the whole new world of possibilities
File Table:
	A list of all files used by a program whiles its running.

	Contains basic information like the file's location and size

	The file table has a limited size, which is a power of 2
	and commonly 256. getdtablesize() will return this value.

		File Table
FD	Name(Path)		Location
	---------------------------------
0	foo			blah
1	output
2	input

	Each file is given an integer index, starting at 0, this is 
	refered to as the file descriptor

	THere are 3 files that are always open in the table
	0 or STDIN_FILENO: stdin
	1 or STDOUT_FILENO: stdout
	2 or STDERR_FILENO: stderr

open - <fcntl.h>
	add a file to ht efile table and returns the file descriptor
	if open fails, -1 returned, extra error info can be found in errno

	errno
		found in <errno.h>
		gives you error number
	sterror
		tells you whats actually wrong

	open(<PATH>, <FLAGS>, <MODE>)
	
	mode
		only used when you make a new file, it is the permissions
		of the new file, must be a 3 didgit octal number

		octal numbers have a leading 0
		0644, 0744.....	

	FLAGS
		determine what you plan to do with the file

		o_rdonly
		o_wronly
		o_rdwr
		o_append
		o_trunc
		o_creat
		o_excl: only works in combo with create, error will return if
			you try to create a file that already exists
---------------------------------------------------------------------
10-22
Song of the Day: Fly me to the moon- Frank Sinatra
AIM: READ YOUR WRITES

Flag Stuff ex:
EXCL(2048)	TRUNC(1024)	CREAT(512)	APPEND(8)	RDWR(2)		WRONLY(1)	RDONLY(0)
0		0		1		0		0		0		0
1		0		0		0		0		0		0
0		0		0		0		0		1		0

bitwise operators
	&: and
	|: or
	~: not
	^: xor
	logical opperators work on each indiviual bit of a value

	char c = 13; //00001101
	char x = ~c; //11110010

flags
	each flag is a number, to combine flags we use bitwise or

	wronly = 1 00000001
	append = 8 00001000
	wronly|append = 00001001

close - <unistd.h>
	remove a file from file table
	returns 0 if sucessfull. returns -1 and set errno if not sucessful
close(<FILE DESCRIPTOR>)

read- <unistd.h>
	read data in file
	read(<FILE DESCRIPTOR>, <BUFFER>, <AMOUNT>)
	read(fd, buff,n)
	amount-based on the size of buffer
	read n bytes from the fd's file and put that data into buff
	returns the number of bytes actually read
	returns -1 and sets errno if not
	
	BUFFER must be a pointer

write- 
	write data to a file
	write(<FILE DESCRIPTOR>, <BUFFER>, <AMOUNT>)
	write(fd, buff,n)
	amount-based on the size of buffer
	write n bytes from the fd's file and put that data into buff
	returns the number of bytes actually written
	returns -1 and sets errno if not
	
	BUFFER MUST BE A POINTER
--------------------------------------------------------
10-26
umask 
	shuts off certain permissions

	is applied by using bitwise negation on the mask
	then bitwise adding to the mose
		new_permissions = ~mask & mode
	default mask is 022
	shuts off write for group and other

lseek
	set the current position in an open file

	lseek(<FILE DESCRIPTOR>,<OFFSET>,<WHENCE>)
	WHENCE-position you are measuring the offset from
	OFFSET- number of bytes to move the position by
----------------------------------------------------------
10-28
aim: i need information, stat!

Do Now: 
	1)Make a Directory
	2)Put a few files in that directory and maybe a directory or two

stat- <sys/stat.h>
	Get information about a file(metadata)
	
	stat(<PATH>, <STAT BUFFER>)

		struct stat sb;
		stat("foo", &sb);

	stat buffer
	
	Must be a buffer to a struct stat

	All the file information gets put into the stat buffer

	Some of the fields in the struct stat:
		st_size
			file size in bytes
		st_uid, st_gid
			user id, group id
		st_mode
			file permissions
		st_atime, st_mtime
			last access, last modification
			These are struct time_t variables. We can use
			functions in time.h to make sense of them

		ctime(<TIME>)
			TIME is the type time_t *
			returns time struct as a string
			has to be a pointer
		time(<TIME>)
			TIME is the type time_t *
			sets a parameter to the current time
--------------------------------------------------------
10-29

Directories	
	a *nix directory i  file contatining the names of the riles within the directory.
	along iwth basic information like file type.

	Moving files into/out of a directory means changing the 
	directory file, not actually moving the data

opendir-<dirent.h>	
	open a director file	

	This will not change the cwd, it only allows your program
	to read the contents of the directory file.

	opendir(<PATH>);
		
	Returns a pointer to a directory stream (DIR *)

readdir - <dirent.h>
	readdir(<DIRECTORY STREAM>)
	
	Returns a pointer to the entry in a directory steam,
	or NULL is all the entries have already been returned.

	struct dirent - <sys/types.h>
		Directory struct that contains the information 
		stored in a directory files.

		Some of the data members

		d_name: Name of file
		d_type:	File type as int

rewinddir - <dirent.h>
	Resets the directory stream ot hte begining

	rewinddir(<DIRECTORY STREAM>)
---------------------------------------------------------
10-30
Aim: Puttin, in the puts
	Command line arguments:
		int main(int argc, char *argv[])

		program name is considered the first command line argument

		argc
			number of command line arguments
		argv
			array of command line arguments

	scanf - <stdio.h>
		scanf(<FORMAT STRING>, <VAR 1>, <VAR 2>...)

		Read in data from stdin using the format string to determine strings to determine types
		
		Puts data for each variable		
		
		Variables must be pointers

	fgets - <stdio.h>
		read in from a file stream and store it in a string

		fgets(<DESTINATION><BYTES><FILE POINTER>)

		fgets(s, n, f);
			Reads at most n characters from a file stream f
			and stores it in s

		File pointer

			FILE * type, more complex than a file descriptor

			stdin is a FILE * variable

		Stops at newLine, end of file, or the byte limit

		Keeps the newLine character as part of the string,
		append NULL after
------------------------------------------------------------------------------
11-4
Aim: Are your processes running? - Then you should go and cath them!

Do Now: run ps and what do you see?

Processes
	Every running program is a process. A process can
	create subprocesses, but these are no different from
	regular processes.
	
	A processor can hold 1 process per cylce (per core)
	"Multitasking" appears to happen because the processor
	switched between all the active processs quickly.
	PID
		Every process has a unique identifier call the PID

		PID 1 is the initial process
		
		Each entry in the /proc directory is a current PID

	getpid() - <unistd.h>
		returns the current process' PID

	fork() - <unistd.h>
		Creates a separate process based on the current one,
		the new process is called child, the original is
		the parent

		The child process is a duplicate of the parent
		process. All parts of the parent process are copied,
		including stack and heap memory, and the file table.

			A quick note on threads: A thread is a separate
			executable entity similar to a child process,
			except a thread is not a standalone process.
			It does not have its own memory space, instead
			it shares its parents memory.
	
		Returns 0 to the child and the child's PID to the parent.

		If a parent's process end before the child, the 
		chil's new parent PID is set to 1.
----------------------------------------------------------------------------
11-5
Aim: Go fork off (another process)

	wait - <unistd.h>
		Stops a parent process from running until any child
		has provided status information to the parent
		(usually the child has exited)
		
		Returns the PID of the child that exited or -1 (errno)

		wait (int *status)
			the parameter (status) is used to store information 
			about the process exited
	
			WEXITSTATUS(int) will return what the
			process returned when it exited.
-------------------------------------------------------------------------
11-9
Aim: Time to bring uot the executioner

	waitpid - <unistd.h>
		Waits for a specific child

		waidpid(pid, statue, options)
		    pid
			The pid of the specific child to look for
		    options
			can set the behavior for wait, if 0, will 
			work normally.
-----------------------------------------------------------------------
11-10

The exec family - <unistd.h>
	There are a number of c functions that canbe user to run
	other programs from within our own programs

	Replaces the current process with the new program, any
	code after a call to an exec fuction will be ignored.

	execl
		execl(<PATH>,<COMMAND>,<ARGS>, NULL)

		PATH
			The path to the program (ex: /bin/ls)
		COMMAND
			The name of a program
		ARGS
			Each command line argument you wish
			to give the program

			The last argument must be NULL

	execlp
		execlp(<PATH>,<COMMAND>,<ARGS>,NULL)
	
		Works like execl, except it uses the PATH
		environment variable for commands, so you can use 
		"ls" as the PATH instead of "/bin/ls"

	execvp
		execvp(<PATH>, <ARGUMENT ARRAY>)
--------------------------------------------------------------------------
11-12
Aim: Take this to delimit

	strsep - <string.h>
		parsing a string with a common delimiter
		strsep(<SOURCE>,<DELIMITER>)
	
		Locates the first occurence of the delimiter in a 
		string and replaces the character with NULL

		Returns the begining of the original string set the source 
		string to the string starting at 1 index past the 
		location of the new NULL

		Since the source variable's value is changed,
		it must be a pointer to a string.

		char s1[100] = "wow-this-is-cool";
		char *s2 = s1;
		
		strsep(&s2, "-");
			//replaces the "-" after wow with NULL
			//returns wow
			//sets s2 to "this-is-cool"
---------------------------------------------------------------------
11-16
Aim: Redirection, how does it...SQUIRREL

	File redirection
		Changing the usual input/output behavior of a program

		Command line redirection
			>
				Redirects stdout to a file
					
				Overwrites the contents of the file			

				<COMMAND> <FILE>
				
				ls > file_list		

			>>
				Redirects stdout to a file
	
				Appends instead of overwrites

			2>
				Redirects stderr to a file

				Overwrites file (2>> will append)

			&>
				Redirects stdout and stderr to a file

			<
				Redirects stdin from a file

			| (pipe)
				Redirects stdout from one command to stdin of the
				next

				ls | wc

	Redirection in C programs
	
		dup2 - <unistd.h>

			Redirect one file descriptor to another

			dup2(fd1, fd2)
				Redirects fd2 to fd1

				You will lose any reference to the original
				fd2, that file is closed
----------------------------------------------------------------------------------
Aim: Sending mixed signals

Signals
	Limited way of sending information to a process.

Kill
	Command Line utility to send a signal to  a process
	
	$ kill <PID>
		Send signal 15 (SIGTERM) to PID

		$ kill -<SIGNAL> <PID>
			sends SIGNAL to PID

		$ killall [-<SIGNAL>] <PROCESS>
			Sends SIGTERM (or SIGNAL if provided) to all processes with
			PROCESS as the name.
		
KILL IN C FUCTIONS <signal.h>

	Kill
		Send a signal to a process in a c program

		kill(<PID>, <SIGNAL>)
		
	sighandler
		To work with signals in a c program you must
		create a signal handleing function

		static void sighandler(int signo)
		to exit in a signal handler must run
		exit(0);
-----------------------------------------------------
	signal
		after you create the function, you attach
		the signals to it using the signal function

			signal(SIGNUMBER, sighandler)
-------------------------------------------------------
12-3
Shared memory - <sys/shm.h><sys/ipc.h><sys/types.h>
	A segment of heap memory, but not attached to a
	particuar process. Can be accessed by multiple processes

	Shared memory is accessed via some key that is
	known by any process that needs to access it.

	Shared memory does not get released when a program exits.

	5 Shared memory operations:
		
		Create the segment[segment of memory] (happens once)[like malloc]
		Access the segment (happens once per process)[like open]
		Attach the segment to a variable (once per process)[pointers]
		Detach the segment from a variable (once per process)
		Remove the segment (happens once)

	shmget [shared memory get]
		Create or access a shared memory segment

		Returns a shared memory descriptor (similar
		idea to a file descriptor), or -1 if it fails

		schmet(key,size,flags)

			key
				unique integer identifier for 
				the shared memory segment
			size
				how much memory to request
			flags
				includes permissions for the segment
			
				combine with bit wise OR

				IPC_CREAT: create the segment, will set all values 
					to 0
				IPC_EXCL: fail is segment alredy exists and
					IPC_CREAT is on
	shmat [shared memory attach]
		Attach a shared memory segment to a variable.
		
		Returns to a pointer to the segment or -1

		shmat(descriptor, address, flags)

			descriptor
				return vale of shmget
			address
				if 0, the OS will provide the appropriate address
			flag
				usually 0
				SHM_RDONLY: make the memory read only
----------------------------------------------------------------------------
SOTD: Plush - Stone Temple Pilots
Aim: Memes

	ftok
		Generate a key for IPC functions

		ftok(path,x)

			path
				A path to some file, the file must be accessible 
				by the program running

			x
				an int used to generate the key

			The generated key will be same if path and x
			are the same for separate calls

	shmdt
		Detach a variable from a shared memory segment

		Returns 0 if successful, or -1 if problem

		shmdt (pointer)

			pointer 
				The address used to access the segment
			examples
				shmdt(p)

	shmctl
		Each shared memory segment has metadata that can be stored in a 
		struct (struct shmid_ds)

		Some of that data stored: last access, size, pid of creater,
		pid of last modification

		Perform operations on the shared memory segment

		shmctl(descriptor, command, buffer)
		
			descriptor
				Return value of shmget
			Commands:
				IPC_STAT: populates buffer with information

				IPC_SET: set some of the information for the
					segment to the info in buffer
				IPC_RMID: remove a shared memory segment
-------------------------------------------------------------------------
SOTD: The General - Dispatch
Aim: How do we flag down a resource?
	Semaphors(created by Edsgar Dijkstra)
		IPC construct used to control access to a shared resource
		
		Essentially, a semaphore is a counter that represents
		how many processes can access a resource at a give time

			If a semaphore has a value of 3, then it can have
			3 active "users"

			0 is unavailable
		Most semaphore operations are "atomic" meaning they will not be 		split up into multiple processor instructions 

		OPERATIONS:
			create a semaphore
			
			set an initial value

			Up(S)/ V(S)
				Release a semaphore to a signal you are done
				with it's associated resource

				pseudocode:
					S++
	
`			Down(S)/P(S)
				Attempt to take a semaphore

				If the semaphore is 0, wait for it to be available

				pseudocode:
					while(S == 0)
						block
					S--

		Semaphore Code
			semget - <sys/types.h> <sys/ips.h> <sys/sem.h>

				Create/ Get access to a semaphore

				This is not the same and UP, semaphore is not 
				modified by segment
				Returns semaphore descriptor

				semget(<KEY>,<AMOUNT>,<FLAGS>)
			
					KEY
						(use ftok)
					flags
						includes permissions for the segment
			
						combine with bit wise OR

						IPC_CREAT: create the segment, will 							
						set all values to 0
						IPC_EXCL: fail is segment alredy 							
						exists and IPC_CREAT is on
--------------------------------------------------------------------------------
	semctl

		control semaphore, including
			set the semaphore value
			remove the semaphore
			get the current value
			get information about the semaphore

		semctl(<DESCRIPTOR>,<INDEX>,<OPERATION>,<DATA>)
			Descriptor
				The return value of the segment
			Index
				The index of the semaphore you want 
				to control in the semaphore set
				indentified by the descriptor

			Operation
				One of the following constants

				IPC_RMID: remove the semaphore	
				SETVAL: Set the value
				GETVAL:return the value
				IPC_STAT:populate buffer with
					info abt the semaphore

			Data
				Variable for setting/storing info 
				abt the semaphore
				(union semun)

			union - must be declared

			union semun {
				int val;
				struct semid_ds *buff;
				unsigned short *array;
				struct seminfo *_buf;
				};
					val: used to set initial value
					buf: buffer for IPC_STAT
---------------------------------------------------------------
semop
	Perform semaphore operations

	semop(<descriptor>,<operation>,<amount>)
		Operation
			a pointer to a struct sembuf value

			struct sembuf{
				short sem_op;
				short sem_num;
				short sem_flg;
			};

			sem_num
				The index of the semaphore u are working on
			sem_op:
				-1: Down
				1: Up
					Any -/+ number will work,
					you will be requesting/releasing that 
					value from the semaphore

				0: Block until semaphore reaches 0

			sem_flag
				Provide further options

				SEM_UNDO: Allow the OS to undo the 
					given operation. Useful in the event
					that a program exits before it could 
					release a semaphore
				IPC_NOWAIT: Instead of waiting for a semaphore
					return error
-----------------------------------------------------------------
12-14
Pipe
	A conduit between 2 separate processes.

	Pipes have 2 ends, a read end and a write end.

	Pipe are ONE directional.

	You can transfer any data you like through a 
	pipe using read/write.

	Unnamed pipes have no external identification

	pipe - <unistd.h>
		create an unnamed pipe.
		
		returns 0 is it was created.

		Opens both ends of the pipe as files.

		pipe(int descriptors[2])

		only way to use unnamed pipe is to fork

	Named Pipe
		AKA FIFOs

		Same as unnamed pipe except they have names.
		that can be used to identify them in diferent programs.
		
		mkfifo
			shell command to make a FIFO

			$ mkfifo <pipe name>
--------------------------------------------------------
12-15
Aim: A pipe by any other name...

	mkfifo - <sys/types.h> <sys/stat.h>
		c function to cerate fifo

		returns 0 if successful and -1 if fail

		once created acts like a regular file

		mkfifo(<name>,<permissions>)

		FIFOs will block open until both ends have connection
----------------------------------------------------------
12-16
SOTD: cantaloop - US3
Aim: always remember to tip your servers

Server/Client Program paradigms
				
	Handshake
		A procedure to ensure that a connection
		has been established

		Both ends of the connection must verify
		that they can send and receive data from
		each other.

		Basic Handshake procedure:
			1) Server creates a names pipe
				(well known pipe)
			2) Server waits for a connection
			3) Client creates a private pipe
			4)Client connects to the server and sends 
			the private pipe's name
			5)Client waits for a connection
			6)Server receives the client's message and
			removes the WKP
			7)Server connects to the client pipe, sending
			an initial acknowledgment message.
			8)Client receives server's messages, removes 
			its private pipes.

int server_handshake(int *from_client){
int to_client;
char line[100];

mkfifo("mario", 0644);
*from_client = open("mario", O_RDONLY);
read(*from_client, line, sizeof(line));
printf("<server> got connection req: %s\n", line);
remove("mario");

to_client = open(line, O_WRONLY);
strncopy(line, "its-a-me, mario!", sizeof(line));
write(to_client, line, sizeof(line));

return to_client;
}



int main(){
int to_client;
int from_client;

to_client = server_handshake(&from_client);


return 0;
}	
------------------------------------------------------
Basic Server
1)Basic Handshake
2)Server gets data from client, "processes" it and sends
	back a response
3)Once the client exit, the server recreates the WKP
	removes the old client connections and the steps	
	restart

Forking Server
	Main server forks off a dedictaed subserver for each 
	client connection

	Allows for multiple simultaneous clients.

	Handshake procedure is modified on the server:
		1-6 are the same
		7) server forks of a subserver
		8) SUBSERVER connects to client pipe

	After Handshake:
		Main server creates a new WKP and waits 
		for a new client

Central dispatch server
	Main server handles all incoming connections

	Subservers are forked of to handle outgoing
	connections
-----------------------------------------------------
1-4
SOTD: Paranoid Andriod - Radiohead

Aim: Cisco in an hour

Do Now: What need to happen in order for 2 computers to commincate with each other?

OSI 7 Layer Model
	Used to help conceptualize the different parts of network connections
	
	The top layer is the most concrete, with each subsequent layer
	becoming more abstract (relying less on the phsyical connections and more on
	code).

	The Layers:
		1. Physical
		2. Data Link
		3. Network
		4. Transport
		5. Session
		6. Presentation
		7. Application

	Physical Layer
		How Computers are physically connected

		Things life electrons running across wires etc.

		History of wired connections.

		Thicknet
			A single coaxial cable run throughout
			the network, "vampire" go into the cable
			and leech the data out
		Thinnet
			A single coaxial cable run throughout
			the network,
			T-Junctions used to splice connections

		In both, Data is sent to all computers

		Each computer added increases the power drain on the
		entire system, degrading service.

		
--------------------------------------------------------------------------------------
1-5
SOTD: Virtual Insanity - Jamiroqui
Aim: Cisco in an Hour Part II: Electric Boogaloo

		Token Ring
			Each Computer is connected in a ring to each other

			Only one computer has control of the network 
			resources at a time. This is called 
			"Having the token"

			The network sends the token throughout the ring
			which contains the identity of the computer
			with the token. All other computers must wait
			to use the network

			NO POSSIBILTY OF COLLISIONS

		Ethernet
			Multiple Computers connect to a single
			hub or switch.

			Hub
				Broadcass the data to all the computers

			Switch
				Sends data to a specific computer
				(Needs to look at Data Link Layer)
----------------------------------------------------------------------------
1-6
SOTD: Break Through - The Doors
Aim: Cisco in an Hour Part III: in 3-D!

	Data Link Layer:
		Point-to-point transmission between devices on the
		same (local) network

		Each device is given a unique 6-byte MAC
		(Media Access Control) address, this is set on
		each network card when they aer made.

		Data is packaged into frames

			Ethernet Frame:
			<prefix><dest><source><...><data><checksum>
			   8B     6B     6B     6B  46-1500B  4B

			prefix: 10101010 x7 10101011
			Destination/Source: MAC addresses
			...: Information about frame type
			Checksum: to ensure data integrity (finger print)

			MTU
			  Maximum Transmission Unit
			  1500 Bytes for ethernet
----------------------------------------------------------------------
1-7
SOTD: Bohemian Rhapsody - Queen
Aim: Cisco in an hour IV: A New Hope

Network Layer (3)
	Transmission of data between two separate networks

	Major features of this layer are addressing, 
	routing and packet fowarding.

	Is not concerned with whether or not data was
	sent successfully (connectionless).

	IP (internet protocol) addresses
		IPv4: 4 byte address
			[0-255].[0-255].[0-255].[0-255]

	Routing is made easier by having IP addresses 
	distributed in blocks
----------------------------------------------------------------
1-8
Aim: Cisco in an hour V for Vendetta
	ARP
		Address Resolution Protocol
		Tanslates IP <--> MAC
		Handled by each individual network separately
	Data is broken into packets
		<header info> <packet length> <fragment checksum>

		<time-to-live> <protocol> <header checksum>

		<source> <destination> <...> <data>

		Header info: pack type (IPv4/6), header length
		Fragment info: Full payloads may be broken up,
				this will have the total # of fragments
				as well as which fragment the
				packet contains.
		Time-to-live: Max # of hops before the packet dies.
		Protocol: TCP/UDP...
		...:optional information depending on type of packet		
		Header checksum:
		
		IP MTU is 65,535 B
		
		IPv6
			is 20 years old
			designed to overcome the limitations of IPv4
			
			Addresses
				
				Address space from 2^32 --> 2^128

				Addresses written as 8 groups of 4
				hexidecimal digits.
			
				87ab:301c:...

				All existing IPv4 addresses can be written
				like this:
				0000:0000:0000:ffff:149.89.150.100

			MTU
				~4.3 billion 
				also referred to as jumbograms

Transport Layer (4)
	
	Computer to Computer connection over a network

	Unconcerned with hte individual hops of
	layer 3 traffic.

	Each destination address has multiple ports
		65,535 ports

	ports < 1024 are well known, reserved ports
----------------------------------------------------------------
1-12
SOTD: Another Day - Pomplamoose

Aim: Cisco in an Hour VII: Adrians's Revenge

Transport Layer (4)
	
	Computer to Computer connection over a network

	Unconcerned with hte individual hops of
	layer 3 traffic.

	Each destination address has multiple ports
		65,535 ports
	
	ports < 1024 are well known, reserved ports
	
	Regulated by the Internet Assigned Numbers
	Authority (IANA)

	TCP
		Transmission Control Protocol

		Reliable Connection

		Guarantees delivery of data

		Data is considered a continouous stream that
		arrives in the order that it is sent
		(which may no  be true in the upper layers)

		Connections are established using a 
		3-way handshake:
			Server "binds" to a port and waits
			1. Client send a SYN message to the server
			2. Server sends the Client a SYN_ACK message
			3. Client sends an ACK message to the server

			Once this is done the connection is 
			established and data can flow freely
			between the two machines.

	UDP
		User Datagram Protocol

		Does not require an explicit connection


		Data is sent as discrete datagrams with a 
		set size (as opposed to a continuous stream)

		Datagrams may be dropped or received
		out of order

		UDP connections are faster because they
		do not need to be reassembled at the
		other end.

		Assumes that any kinda of error checking
		is handled at levels 5-7
